generator client {
  provider = "prisma-client-js"
}

// datasource db {
//  provider = "postgresql"
//  url      = env("DATABASE_URL")
// }

// vercel cloud db settings
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FoodItem {
  id        String       @id @default(cuid())
  name      String       @unique
  price     String
  image     String
  category  FoodCategory
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  orderItems OrderItem[]
}

enum FoodCategory {
  starters
  mains
  sides
  drinks
}

model Order {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  totalPrice     Decimal
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  orderItems     OrderItem[]
  orderConfirmed Boolean     @default(false)
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  foodId String
  food   FoodItem @relation(fields: [foodId], references: [id])

  @@unique([orderId, foodId], name: "food_item_unique")
}
